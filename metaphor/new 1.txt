void createColorAttachment()
{
	sp::Texture 	texture;
	unsigned int 	rbo_msaa_color_obj;
	
	ColorAttachment attachment;
	
	attachment.texture.create(width, height);
	attachment.texture.generateMipmap();
	attachment.texture.m_is_fbo_attachment = true;
	
	GLint read_framebuffer = 0;
	GLint draw_framebuffer = 0;
		
	spCheck(glGetIntegerv(GL_READ_FRAMEBUFFER_BINDING_EXT, &read_framebuffer))
	spCheck(glGetIntegerv(GL_DRAW_FRAMEBUFFER_BINDING_EXT, &draw_framebuffer))
		
	spCheck(glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, m_fbo_obj))
	spCheck(glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT + n, GL_TEXTURE_2D, attachment.texture.m_tex_obj, 0);
	
	if(m_samples > 0)
	{
		spCheck(glGenRenderbuffersEXT(1, &rbo_msaa_color_obj))
		
		
		spCheck(glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, m_fbo_msaa_obj))
		
		spCheck(glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, rbo_msaa_color_obj))
		spCheck(glRenderbufferStorageMultisampleEXT(GL_RENDERBUFFER_EXT, m_samples, GL_RGBA8, m_width, m_height))
		spCheck(glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT + n, GL_RENDERBUFFER_EXT, rbo_msaa_color_obj))
	}
	
	m_color_attachments.push_back(attachment);
	spCheck(glBindFramebufferEXT(GL_READ_FRAMEBUFFER_BINDING_EXT, read_framebuffer))
	spCheck(glBindFramebufferEXT(GL_DRAW_FRAMEBUFFER_BINDING_EXT, draw_framebuffer))
}