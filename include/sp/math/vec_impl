
#ifndef SP_VEC2_NO_DEFINE_OPERATORS
	template<typename T>
	SP_CONSTEXPR vec2<T> operator-(const vec2<T>& v)
	{
		vec2<T> vres;
		vres.x = -v.x;
		vres.y = -v.y;
		return vres;
	}

	template<typename T>
	SP_CONSTEXPR vec2<T> operator+(const vec2<T>& v1, const vec2<T> v2)
	{
		vec2<T> vres;
		vres.x = v1.x + v2.x;
		vres.y = v1.y + v2.y;
		return vres;
	}

	template<typename T>
	SP_CONSTEXPR vec2<T> operator-(const vec2<T>& v1, const vec2<T> v2)
	{
		vec2<T> vres;
		vres.x = v1.x - v2.x;
		vres.y = v1.y - v2.y;
		return vres;
	}

	template<typename T, typename U>
	SP_CONSTEXPR vec2<T> operator+(const vec2<T>& v1, const vec2<U> v2)
	{
		vec2<T> vres;
		vres.x = v1.x + static_cast<T>(v2.x);
		vres.y = v1.y + static_cast<T>(v2.y);
		return vres;
	}

	template<typename T, typename U>
	SP_CONSTEXPR vec2<T> operator+(const vec2<U>& v1, const vec2<U> v2)
	{
		vec2<T> vres;
		vres.x = static_cast<T>(v1.x) + v2.x;
		vres.y = static_cast<T>(v1.y) + v2.y;
		return vres;
	}

	template<typename T, typename U>
	SP_CONSTEXPR vec2<T> operator-(const vec2<T>& v1, const vec2<U> v2)
	{
		vec2<T> vres;
		vres.x = v1.x - static_cast<T>(v2.x);
		vres.y = v1.y - static_cast<T>(v2.y);
		return vres;
	}

	template<typename T, typename U>
	SP_CONSTEXPR vec2<T> operator-(const vec2<U>& v1, const vec2<T> v2)
	{
		vec2<T> vres;
		vres.x = static_cast<T>(v1.x) - v2.x;
		vres.y = static_cast<T>(v1.y) - v2.y;
		return vres;
	}

	template<typename T>
	SP_CONSTEXPR vec2<T> operator*(const vec2<T>& v, float s)
	{
		vec2<T> vres;
		vres.x = v.x * s;
		vres.y = v.y * s;
		return vres;
	}

	template<typename T>
	SP_CONSTEXPR vec2<T> operator*(float s, const vec2<T>& v)
	{
		vec2<T> vres;
		vres.x = v.x * s;
		vres.y = v.y * s;
		return vres;
	}

	template<typename T>
	float operator*(const vec2<T>& v1, const vec2<T>& v2)
	{
		return (v1.x * v2.x + v1.y * v2.y);
	}


	template<typename T, typename U>
	float operator*(const vec2<T>& v1, const vec2<U>& v2)
	{
		return (v1.x * v2.x + v1.y * v2.y);
	}

	template<typename T>
	bool operator==(const vec2<T>& v1, const vec2<T>& v2)
	{
		return (v1.x == v2.x && v1.y == v2.y);
	}

	template<>
	inline bool operator==<float>(const vec2<float>& v1, const vec2<float>& v2)
	{
        return (!spHelperCompareFloat(v1.x, v2.x)
             && !spHelperCompareFloat(v1.y, v2.y));
	}

	template<>
	inline bool operator!=<float>(const vec2<float>& v1, const vec2<float>& v2)
	{
        return !(v1 == v2);
	}

	template<typename T, typename U>
	bool operator==(const vec2<T>& v1, const vec2<U>& v2)
	{
		return (
			(v1.x == static_cast<T>(v2.x))
		&&	(v1.y == static_cast<T>(v2.y)));
	}

	template<typename T>
	bool operator!=(const vec2<T>& v1, const vec2<T>& v2)
	{
		return !(v1 == v2);
	}

	template<typename T, typename U>
	bool operator!=(const vec2<T>& v1, const vec2<U>& v2)
	{
		return !(v1 == v2);
	}

#endif

#ifndef SP_NO_DEFINE_REF_OPERATORS
	template<typename T>
	SP_CONSTEXPR vec2<T>& operator+=(vec2<T>& v1, const vec2<T>& v2)
	{
		v1.x += v2.x;
		v1.y += v2.y;
		return v1;
	}

	template<typename T>
	SP_CONSTEXPR vec2<T>& operator-=(vec2<T>& v1, const vec2<T>& v2)
	{
		v1.x -= v2.x;
		v1.y -= v2.y;
		return v1;
	}

	template<typename T, typename U>
	SP_CONSTEXPR vec2<T>& operator+=(vec2<T>& v1, const vec2<U>& v2)
	{
		v1.x += static_cast<T>(v2.x);
		v1.y += static_cast<T>(v2.y);
		return v1;
	}

	template<typename T, typename U>
	SP_CONSTEXPR vec2<T>& operator-=(vec2<T>& v1, const vec2<U>& v2)
	{
		v1.x -= static_cast<T>(v2.x);
		v1.y -= static_cast<T>(v2.y);
		return v1;
	}

	template<typename T>
	SP_CONSTEXPR vec2<T>& operator*=(vec2<T>& v, float s)
	{
		v.x *= s;
		v.y *= s;
		return v;
	}

	template<typename T>
	SP_CONSTEXPR vec2<T>& operator*=(float s, vec2<T>& v)
	{
		v.x *= s;
		v.y *= s;
		return v;
	}

#endif
